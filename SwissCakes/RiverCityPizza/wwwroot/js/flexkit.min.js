var $jscomp = $jscomp || {};
$jscomp.scope = {};
$jscomp.findInternal = function (a, d, c) {
    a instanceof String && (a = String(a));
    for (var e = a.length, g = 0; g < e; g++) {
        var k = a[g];
        if (d.call(c, k, g, a)) return { i: g, v: k };
    }
    return { i: -1, v: void 0 };
};
$jscomp.ASSUME_ES5 = !1;
$jscomp.ASSUME_NO_NATIVE_MAP = !1;
$jscomp.ASSUME_NO_NATIVE_SET = !1;
$jscomp.SIMPLE_FROUND_POLYFILL = !1;
$jscomp.defineProperty =
    $jscomp.ASSUME_ES5 || "function" == typeof Object.defineProperties
        ? Object.defineProperty
        : function (a, d, c) {
            a != Array.prototype && a != Object.prototype && (a[d] = c.value);
        };
$jscomp.getGlobal = function (a) {
    return "undefined" != typeof window && window === a ? a : "undefined" != typeof global && null != global ? global : a;
};
$jscomp.global = $jscomp.getGlobal(this);
$jscomp.polyfill = function (a, d, c, e) {
    if (d) {
        c = $jscomp.global;
        a = a.split(".");
        for (e = 0; e < a.length - 1; e++) {
            var g = a[e];
            g in c || (c[g] = {});
            c = c[g];
        }
        a = a[a.length - 1];
        e = c[a];
        d = d(e);
        d != e && null != d && $jscomp.defineProperty(c, a, { configurable: !0, writable: !0, value: d });
    }
};
$jscomp.polyfill(
    "Array.prototype.find",
    function (a) {
        return a
            ? a
            : function (a, c) {
                return $jscomp.findInternal(this, a, c).v;
            };
    },
    "es6",
    "es3"
);
(function () {
    function a(b) {
        return -1 !== n.indexOf(b);
    }
    function d(b) {
        if (!m.className.match(new RegExp(b, "i"))) {
            var a = m.className.replace(/^\s+|\s+$/g, "");
            m.className = a + " " + b;
        }
    }
    function c(b) {
        m.className.match(new RegExp(b, "i")) && (m.className = m.className.replace(" " + b, ""));
    }
    function e() {
        b.landscape() ? (c("portrait"), d("landscape"), g("landscape")) : (c("landscape"), d("portrait"), g("portrait"));
        l();
    }
    function g(b) {
        for (var a in q) q[a](b);
    }
    function k(a) {
        for (var d = 0; d < a.length; d++) if (b[a[d]]()) return a[d];
        return "unknown";
    }
    function l() {
        b.orientation = k(["portrait", "landscape"]);
    }
    var h = window.device,
        b = {},
        q = [];
    window.device = b;
    var m = window.document.documentElement,
        n = window.navigator.userAgent.toLowerCase(),
        r = "googletv viera smarttv internet.tv netcast nettv appletv boxee kylo roku dlnadoc pov_tv hbbtv ce-html".split(" ");
    b.macos = function () {
        return a("mac");
    };
    b.ios = function () {
        return b.iphone() || b.ipod() || b.ipad();
    };
    b.iphone = function () {
        return !b.windows() && a("iphone");
    };
    b.ipod = function () {
        return a("ipod");
    };
    b.ipad = function () {
        var b = "MacIntel" === navigator.platform && 1 < navigator.maxTouchPoints;
        return a("ipad") || b;
    };
    b.android = function () {
        return !b.windows() && a("android");
    };
    b.androidPhone = function () {
        return b.android() && a("mobile");
    };
    b.androidTablet = function () {
        return b.android() && !a("mobile");
    };
    b.blackberry = function () {
        return a("blackberry") || a("bb10");
    };
    b.blackberryPhone = function () {
        return b.blackberry() && !a("tablet");
    };
    b.blackberryTablet = function () {
        return b.blackberry() && a("tablet");
    };
    b.windows = function () {
        return a("windows");
    };
    b.windowsPhone = function () {
        return b.windows() && a("phone");
    };
    b.windowsTablet = function () {
        return b.windows() && a("touch") && !b.windowsPhone();
    };
    b.fxos = function () {
        return (a("(mobile") || a("(tablet")) && a(" rv:");
    };
    b.fxosPhone = function () {
        return b.fxos() && a("mobile");
    };
    b.fxosTablet = function () {
        return b.fxos() && a("tablet");
    };
    b.meego = function () {
        return a("meego");
    };
    b.cordova = function () {
        return window.cordova && "file:" === location.protocol;
    };
    b.nodeWebkit = function () {
        return "object" === typeof window.process;
    };
    b.mobile = function () {
        return b.androidPhone() || b.iphone() || b.ipod() || b.windowsPhone() || b.blackberryPhone() || b.fxosPhone() || b.meego();
    };
    b.tablet = function () {
        return b.ipad() || b.androidTablet() || b.blackberryTablet() || b.windowsTablet() || b.fxosTablet();
    };
    b.desktop = function () {
        return !b.tablet() && !b.mobile();
    };
    b.television = function () {
        for (var b = 0; b < r.length;) {
            if (a(r[b])) return !0;
            b++;
        }
        return !1;
    };
    b.portrait = function () {
        return screen.orientation && Object.prototype.hasOwnProperty.call(window, "onorientationchange")
            ? -1 !== screen.orientation.type.indexOf("portrait")
            : b.ios() && Object.prototype.hasOwnProperty.call(window, "orientation")
                ? 90 !== Math.abs(window.orientation)
                : 1 < window.innerHeight / window.innerWidth;
    };
    b.landscape = function () {
        return screen.orientation && Object.prototype.hasOwnProperty.call(window, "onorientationchange")
            ? -1 !== screen.orientation.type.indexOf("landscape")
            : b.ios() && Object.prototype.hasOwnProperty.call(window, "orientation")
                ? 90 === Math.abs(window.orientation)
                : 1 > window.innerHeight / window.innerWidth;
    };
    b.noConflict = function () {
        window.device = h;
        return this;
    };
    b.ios()
        ? b.ipad()
            ? d("ios ipad tablet")
            : b.iphone()
                ? d("ios iphone mobile")
                : b.ipod() && d("ios ipod mobile")
        : b.macos()
            ? d("macos desktop")
            : b.android()
                ? b.androidTablet()
                    ? d("android tablet")
                    : d("android mobile")
                : b.blackberry()
                    ? b.blackberryTablet()
                        ? d("blackberry tablet")
                        : d("blackberry mobile")
                    : b.windows()
                        ? b.windowsTablet()
                            ? d("windows tablet")
                            : b.windowsPhone()
                                ? d("windows mobile")
                                : d("windows desktop")
                        : b.fxos()
                            ? b.fxosTablet()
                                ? d("fxos tablet")
                                : d("fxos mobile")
                            : b.meego()
                                ? d("meego mobile")
                                : b.nodeWebkit()
                                    ? d("node-webkit")
                                    : b.television()
                                        ? d("television")
                                        : b.desktop() && d("desktop");
    b.cordova() && d("cordova");
    b.onChangeOrientation = function (b) {
        "function" == typeof b && q.push(b);
    };
    var p = "resize";
    Object.prototype.hasOwnProperty.call(window, "onorientationchange") && (p = "orientationchange");
    window.addEventListener ? window.addEventListener(p, e, !1) : window.attachEvent ? window.attachEvent(p, e) : (window[p] = e);
    e();
    b.type = k(["mobile", "tablet", "desktop"]);
    b.os = k("ios iphone ipad ipod android blackberry macos windows fxos meego television".split(" "));
    l();
}.call(this));
(function (a, d) {
    function c() { }
    var e = new c();
    c.prototype.createEl = function (a, c, e) {
        var g = 0;
        e = e || d.body;
        for (a = d.createElement(a); g < c.length; g++) a.setAttribute(c[g].split(/:(.+)/)[0], c[g].split(/:(.+)/)[1] || "");
        e.appendChild(a);
    };
    c.prototype.insertAfter = function (a, d) {
        var c = d.parentNode;
        return (d = d.nextSibling) ? c.insertBefore(a, d) : c.appendChild(a);
    };
    c.prototype.addEvent = function (a, c, e, h) {
        h = d.querySelector(h) || d;
        var b = c.split(",");
        c = [];
        a = a.split(" ");
        for (var g, m = 0, k = 0; m < b.length; m++) {
            g = h.querySelectorAll(b[m].trim());
            for (var l = 0; l < g.length; l++) c.push(g[l]);
        }
        for (; k < c.length; k++)
            for (h = 0; h < a.length; h++)
                c[k].addEventListener(
                    a[h],
                    function (b) {
                        e(b, b.target);
                    },
                    !1
                );
        return this;
    };
    c.prototype.offset = function (c) {
        c = c.getBoundingClientRect();
        return { top: c.top + (a.pageYOffset || d.documentElement.scrollTop), left: c.left + (a.pageXOffset || d.documentElement.scrollLeft) };
    };
    a.helper = e;
})(window, document);
(function (a, d, c) {
    function e(c) {
        k = d.documentElement;
        c = c || {};
        l = d.getElementById("current_theme") ? d.getElementById("current_theme").value : !1;
        this.name = "flexkit";
        this.version = "0.0.2";
        this.themeName = l;
        g = this;
        var b = c.chooseBoxStyle || !1;
        if ((c = c.loadScript) && l) for (var e = 0, h = a.location.href + "themes/" + l + "/js/plugin/", n; e < c.length; e++) (n = c[e] + ".min.js"), helper.createEl("SCRIPT", ["async", "src:" + h + n]);
        if (b)
            for (b = d.querySelectorAll('[type="checkbox"]:not(.filed-upgrade):not(.icon):not(.hidden):not(.processed),[type="radio"]:not(.filed-upgrade):not(.icon):not(.hidden):not(.processed)'), h = 0, n = b.length; h < n; h++)
                (e = b[h].id),
                    e || (b[h].id = e = "chr-" + Math.floor(1e3 * Math.random() + 1)),
                    "LABEL" === b[h].parentNode.nodeName && b[h].parentNode.setAttribute("for", e),
                    b[h].parentNode.classList.contains("btn-group") ||
                    ("LABEL" === b[h].parentNode.nodeName ? (c = d.createElement("SPAN")) : ((c = d.createElement("LABEL")), c.setAttribute("for", e)), c.classList.add("checkbox_radio"), helper.insertAfter(c, b[h])),
                    b[h].classList.add("filed-upgrade", "processed");
        console.log("%s init.", "[flexkit]");
        return g;
    }
    var g, k, l;
    e.prototype.showLoader = function (a) {
        d.documentElement.classList.remove(a ? "loaded" : "d-loaded");
    };
    e.prototype.hideLoader = function (a) {
        d.documentElement.classList.add(a ? "loaded" : "d-loaded");
    };
    e.prototype.getSpaceFromTop = function () {
        return a.pageYOffset || d.documentElement.scrollTop;
    };
    e.prototype.isMobile = function (a) {
        "desktop" !== device.type && (console.log("%s Mobile scripts loaded.", "[flexkit]"), a());
    };
    e.prototype.isLang = function (a) {
        return k.lang === (a || "").toLowerCase() ? !0 : d.documentElement.lang;
    };
    a.flexkit = {
        init: function (a) {
            return g || new e(a);
        },
    };
})(window, document);
function _tooltip() {
    function a(a, d) {
        var c = "",
            e = "";
        switch (d) {
            case "right":
                c = "left+10 center";
                e = "right center";
                break;
            case "left":
                c = "right-10 center";
                e = "left center";
                break;
            case "top":
                c = "center bottom-10";
                e = "center top";
                break;
            case "bottom":
                c = "center top+10";
                e = "center bottom";
                break;
            default:
                return !1;
        }
        a.tooltip("option", {
            track: !1,
            position: {
                my: c,
                at: e,
                using: function (a, c) {
                    $(this).css(a);
                    $("<span>").addClass("arrow").addClass(c.vertical).addClass(c.horizontal).appendTo(this);
                },
            },
        });
    }
    var d = $(".tooltip");
    d.find("a").removeAttr("title");
    d.tooltip({
        items: ".tooltip[title], [data-tooltip-element], [data-tooltip-content]",
        track: !0,
        position: { my: "left top+20", at: "left bottom" },
        content: function () {
            var a = $(this),
                d = a.data("tooltip-content"),
                g = a.data("tooltip-element");
            if (a.is("[title]")) return a.attr("title");
            if ("undefined" !== typeof d) return eval("(" + d + ")");
            if ("undefined" !== typeof g) return $(g).html();
        },
    });
    d.each(function () {
        var d = $(this),
            e = d.data("tooltip-position");
        d.tooltip("option", { tooltipClass: d.data("tooltip-classes") });
        a(d, e);
    });
}
_tooltip();
(function () {
    if (document.getElementsByClassName("parallax").length && document.getElementsByClassName("take-from-widget").length)
        for (var a = 0, d, c = document.getElementsByClassName("take-from-widget"); a < c.length; a++) if ((d = c[a].childNodes[1].src)) c[a].style.backgroundImage = "url(" + d + ")";
})();
var body = document.body,
    flexkit = flexkit.init({ chooseBoxStyle: !0 }),
    contactClick = !1;
helper.addEvent("click", '[href^="mailto:"], [href^="tel:"]', function () {
    contactClick = !0;
});
window.onbeforeunload = function () {
    contactClick || flexkit.showLoader(device.type);
    contactClick = !1;
};
window.addEventListener("load", function () {
    flexkit.hideLoader(device.type);
});

flexkit.isMobile(function () {
    function a(a) {
        a.target.hasAttribute("data-overlay") && (a.preventDefault(), document.querySelector(".m-menu.open").classList.remove("open"), body.removeAttribute("data-overlay"));
    }
    replaceSelector(":hover|:active", ".touch", !1);
    helper
        .addEvent("touchstart", "body", function (a, c) {
            c.classList.add("touch");
        })
        .addEvent("touchend touchmove", "body", function (a, c) {
            c.classList.remove("touch");
        })
        .addEvent("click", "[data-refer]", function (d, c) {
            "undefined" != typeof c && c.dataset.refer.length && (document.querySelector('[data-el="' + c.dataset.refer + '"]').classList.add("open"), body.setAttribute("data-overlay", ""), body.addEventListener("touchend", a));
        });
    (function (a, c) {
        a = document.getElementsByClassName(a);
        if (window.Hammer)
            Hammer.each(a, function (a) {
                new Hammer(a, { domEvents: !0 }).on("tap", c);
            });
        else for (var d = 0; d < a.length; d++) window.addEventListener ? a[d].addEventListener("click", c, !1) : window.attachEvent && a[d].attachEvent("click", c, !1);
    })("sub-menu-btn", function (a) {
        window.Hammer ? a.srcEvent.stopPropagation() : a.stopPropagation();
        a.preventDefault();
        a.target.classList.toggle("active");
        a.target.parentNode.querySelector("ul").classList.toggle("open");
    });
});
var topBox = $('<div class="webPage-go-top"></div>').css({ position: "fixed", bottom: "20px", right: "20px", "z-index": "555", cursor: "pointer", display: "none" }).addClass("btn icon icon-arrow-up2");
device.type ||
    ($("body").append(topBox),
        $(window).scroll(function (a) {
            300 >= $(window).scrollTop() ? $(".webPage-go-top").hide("slow") : $(".webPage-go-top").show("slow");
        }));
$(document).on("click", ".webPage-go-top", function (a) {
    $("html, body").animate({ scrollTop: 0 }, 1e3);
});
var sheet, rule, selectors, newSelectorRule, newRule, j, f;
function replaceSelector(a, d, c) {
    var e = new RegExp(a + "\\b");
    c = c ? new RegExp(c + "\\b") : c;
    try {
        for (var g = 0; g < document.styleSheets.length; g++)
            if (((sheet = document.styleSheets[g]), null != sheet.cssRules && 0 != sheet.cssRules.length))
                for (j = 0; j < sheet.cssRules.length; j++)
                    if (((rule = sheet.cssRules[j]), rule.type === CSSRule.STYLE_RULE)) changeRule(rule, e, d, a, rule.type, c);
                    else if (rule.type === CSSRule.MEDIA_RULE) for (f = 0; f < rule.cssRules.length; f++) changeRule(rule.cssRules[f], e, d, a, rule.type, c);
    } catch (k) {
        if ("SecurityError" !== k.name) throw k;
    }
}
function changeRule(a, d, c, e, g, k) {
    selectors = a.selectorText;
    /\.btn|button|[type="button"]|[type="submit"]|a\b/.test(a.selectorText) && a.style.getPropertyValue("transition") && a.style.removeProperty("transition");
    if (k && k.test(a.selectorText)) {
        for (var l = a.selectorText.split(","), h = 0; h <= l.length; h++) k.test(l[h]) && (l.splice(h, 1), h--);
        selectors = l.join();
        if (!l.length && g === CSSRule.STYLE_RULE) {
            sheet.deleteRule(j);
            j--;
            return;
        }
        if (!l.length && g === CSSRule.MEDIA_RULE) {
            sheet.cssRules[j].deleteRule(f);
            f--;
            return;
        }
    }
    d.test(a.selectorText) &&
        ((newSelectorRule = selectors.replace(new RegExp(e, "g"), c)),
            (newRule = a.cssText.replace(/([^{]*)?/, newSelectorRule + " ")),
            g === CSSRule.STYLE_RULE && (sheet.deleteRule(j), sheet.insertRule(newRule, j)),
            g === CSSRule.MEDIA_RULE && (sheet.cssRules[j].deleteRule(f), sheet.cssRules[j].insertRule(newRule, f)));
}
